[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "song-genre-classifier"
version = "1.0.0"
description = "A professional machine learning system for classifying songs into Rock and Hip-Hop genres"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Multimedia :: Sound/Audio :: Analysis",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "scikit-learn>=1.0.0",
    "matplotlib>=3.4.0",
    "seaborn>=0.11.0",
    "joblib>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0.0",
    "pytest-cov>=2.12.0",
    "pytest-mock>=3.10.0",
    "black>=21.0.0",
    "flake8>=3.9.0",
    "isort>=5.10.0",
    "pylint>=2.15.0",
    "mypy>=0.910",
    "pre-commit>=2.20.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "pydocstyle>=6.1.0",
    "pip-audit>=2.4.0",
    "flake8-docstrings>=1.6.0",
    "flake8-bugbear>=22.7.0",
    "flake8-comprehensions>=3.10.0",
    "flake8-simplify>=0.19.0",
    "types-all>=0.1.0",
]
notebook = [
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
    "nbqa>=1.5.0",
]

[project.scripts]
song-classifier = "cli:main"

[project.urls]
Homepage = "https://github.com/yourusername/Classify-Song-Genres-from-Audio-Data-project"
Repository = "https://github.com/yourusername/Classify-Song-Genres-from-Audio-Data-project"
Issues = "https://github.com/yourusername/Classify-Song-Genres-from-Audio-Data-project/issues"

[tool.setuptools_scm]
write_to = "song_genre_classifier/_version.py"

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.pylint.messages_control]
disable = [
    "C0114",  # missing-module-docstring
    "C0115",  # missing-class-docstring
    "C0116",  # missing-function-docstring
]

[tool.pylint.format]
max-line-length = 88

[tool.pylint.design]
max-args = 5
max-locals = 15
max-branches = 12
max-statements = 50
max-parents = 7
max-attributes = 7
min-public-methods = 2
max-public-methods = 20

[tool.pylint.basic]
good-names = [
    "i",
    "j",
    "k",
    "ex",
    "Run",
    "_",
    "id",
    "df",
    "X",
    "y",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "sklearn.*",
    "matplotlib.*",
    "seaborn.*",
    "joblib.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["."]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--cov=song_genre_classifier",
    "--cov=config",
    "--cov=cli",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["song_genre_classifier", "config", "cli"]
omit = [
    "test_*.py",
    "*_test.py",
    "setup.py",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.bandit]
exclude_dirs = ["tests", "test"]
skips = ["B101", "B601"]